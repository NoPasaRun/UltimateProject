services:
  postgres:
    container_name: ultimate-postgres
    image: postgres:17
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    container_name: ultimate-redis
    image: redis:7
    volumes:
      - redis_data:/data

  auth:
    container_name: ultimate-auth
    build:
      context: .
      dockerfile: auth_service/Dockerfile
      args:
        - STAGE=$STAGE
    restart: on-failure
    environment:
      - WATCHFILES_FORCE_POLLING=true
    volumes:
      - ./auth_service:/app
    depends_on:
      - redis
      - postgres

  client:
    container_name: ultimate-client
    build:
      context: .
      dockerfile: client_service/Dockerfile
      args:
        - STAGE=$STAGE
    volumes:
      - ./client_service:/app

  api:
    container_name: ultimate-api
    build:
      context: .
      dockerfile: api_service/Dockerfile
      args:
        - STAGE=$STAGE
    volumes:
      - ./api_service:/app
      - media_data:/media

  server:
    container_name: ultimate-server
    dns:
      - 8.8.8.8
      - 8.8.8.4
    restart: on-failure
    build:
      context: .
      dockerfile: proxy_service/Dockerfile
      args:
        - STAGE=$STAGE
    volumes:
      - media_data:/media
    depends_on:
      - auth
      - api
      - client
    ports:
      - "80:80"

volumes:
  postgres_data:
  redis_data:
  media_data:

networks:
  vipnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1
